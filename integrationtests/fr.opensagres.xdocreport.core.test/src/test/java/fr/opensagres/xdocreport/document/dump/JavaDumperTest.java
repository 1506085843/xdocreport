package fr.opensagres.xdocreport.document.dump;

import java.io.IOException;
import java.io.InputStream;

import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;

import fr.opensagres.xdocreport.core.XDocReportException;
import fr.opensagres.xdocreport.document.IXDocReport;
import fr.opensagres.xdocreport.document.registry.XDocReportRegistry;

public class JavaDumperTest {
	private static final String DEFAULT_REPORTID = "defaultReportId";

	static XDocReportRegistry registry = XDocReportRegistry.getRegistry();

	private JavaDumper generator = new JavaDumper();
	@BeforeClass
	public static void loadReport() throws IOException, XDocReportException {
		InputStream sourceStream = ClassLoader
				.getSystemResourceAsStream("TestTable.docx");
		registry.loadReport(sourceStream, DEFAULT_REPORTID, true);
	}

	
	@Test
	public void base64() throws Exception {
		String base64 = "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";
		IXDocReport reportUnderTest = registry.getReport(DEFAULT_REPORTID);
		String encoded = generator.toBase64(reportUnderTest);
		//TODO (Comparaison) Assert.assertEquals(base64, encoded);
	}

	@Test
	public void generateMain() throws Exception {
		generator.generateImport();
		generator.startClass();
		generator.endClass();
	}
}
